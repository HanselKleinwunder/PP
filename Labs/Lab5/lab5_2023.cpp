
/*************************************************************
	Практическое занятие №5. Функции.
	Объявление, определение, вызов.
	Передача параметров. Возвращение значения.
	
*************************************************************/
#include <iostream>
#include <tchar.h>
//#include <cstdio>
//#include <cstdarg>
#include "other.h"


#define	  stop __asm nop

int _tmain()
{
/////////////////////////////////////////////////////////////////////////////
// Задание 1. Ссылки.
/////////////////////////////////////////////////////////////////////////////
// 1.1. Объявите ссылку на тип double. Посредством ссылки измените значение
#if 0
	double a = 3.5;
	double& b = a;
#endif
	stop
// 1.2. Раскомментируйте  следующую строчку. 
#if 0
//Что следует сделать, чтобы linker не выдавал ошибки при создании exe-файла?
//Подсказка: ref - это внешняя по отношению к данному файлу ссылка!
//Подумайте, где надо объявить эту внешнюю ссылку, а где ее определить.

	extern double& ref;
	ref++;
#endif
	stop
// 1.3. Раскомментируйте следующую строку.
#if 0
//Что следует сделать, чтобы компилятор не выдавал ошибки 
	const int& ref1 = 1;
#endif
// 1.4. Задан указатель:
#if 0
	
	char c = 'A';
	char* pc = &c;

//Объявите ссылку на указатель. Посредством ссылки измените
	char*& refpc = pc;
//а) значение по адресу
	//&refpc = 'B'; Ошибка
//б) сам адрес
	refpc = &c;
#endif
	stop
// 1.5. Объявите и определите функцию, вычисляющую квадрат числа, переданного в качестве параметра.
#if 0
//параметр должен быть ссылкой (!). Вызовите функцию с заданными ниже аргументами
//Замечание (!!!):
//объявления функций принято помещать в заголовочный файл (.h),
//а определения функций - в файл реализации (.cpp)
//в задании заготовлены файлы other.cpp и other.h. 
//Эти файлы можно использовать для размещения  Ваших функций.
	{
		int x = 10;
		int y = 5;
		int res1 = Square(x);
		int& res2 = y;
		Square(y);
	}
#endif
	stop
////////////////////////////////////////////////////////////////////////////	
//Задание 2. Отличия при передаче параметров
////////////////////////////////////////////////////////////////////////////
//а) по значению, б) по ссылке, в) по указателю
// 2.1. Объявите и определите три функции, которые увеличивают заданное c помощью параметра значение на 1 
#if 0
	// а) - IncByValue(),
	// б) - IncByPointer(), 
	// в) - IncByReference() . 
	// Проверьте правильность с помощью отладчика.

	int val = 1;//значение этой переменной должно быть увеличено с помощью каждой из функций на единицу
	IncByValue(val); //Остаётся единица, область видимости и время жизни ограничивается фигурными скобками тела функции
	IncByReference(val); //Передача по ссылке. Значение увеличивается на единицу. Получаем двойку
	IncByPointer(&val); //На выходе тройка
#endif
	stop
// 2.2 Передача параметров c помощью указателя и по ссылке.
#if 0
//Создайте функцию (функции) Swap(), которая меняет значения
//переменных nX и nY местами.

// а)Функция должна принимать два указателя на int  и оперируя этими указателями
//   должна менять значения переменных в вызывающей (!) программе

// б)Функция должна принимать две ссылки на int и оперируя этими ссылками
//   должна менять значения переменных в вызывающей (!) программе
//Проверьте правильность с помощью приведенного ниже фрагмента.

	int	nX = 1;
	int nY = -1;
	Swap_p(&nX, &nY);  //поменяли местами значения nX и nY с помощью указателей на nX и nY
	Swap_r(nX, nY);  //а теперь обратно с помощью ссылок на nX и nY
#endif
	stop
////////////////////////////////////////////////////////////////////////////
//Задание 3. Массивы в качестве аргументов.
////////////////////////////////////////////////////////////////////////////
// 3.1. Напишите функцию печати элементов во встроенном одномерном массиве
#if 0
//Например:
	int ar[N] = { 1, 2, 3, 4, 5 };//подумайте - как и где должна быть задана N
	PrintArray(ar, sizeof(ar) / sizeof(ar[0]));

	int ar2[] = { 1, 2, 3, 4, 5 };
	PrintArray(ar2, sizeof(ar) / sizeof(ar[0]));
#endif
	stop
// 3.2. Напишите функцию поиска минимального элемента во встроенном одномерном массиве
#if 0
//Например:
	int ar[] = { 3, 2, 1, 4, 5 };
	int res = Min(ar, sizeof(ar) / sizeof(ar[0]));

	std::cout << res;
#endif
	stop
// 3.3. Напишите функцию сравнения двух строк - MyStrCmp(): Доделать!
#if 0
//Функция должна принимать два указателя на сравниваемые строки 
//(возможно Вы должны указать компилятору, что функция не имеет права модифицировать 
//содержимое строк)

//Функция должна возвращать отрицательное значение, если
//первая строка лексикографически меньше второй, 0 - если
//они равны и положительное значение, если первая строка больше второй.
//Замечание: при лексикографическом способе сравниваются коды символов (!!!), а не длина строк
//если код  символа первой строки > соответствующего кода символа второй строки, 
//то первая строка > второй 
//Вспомните, что признаком конца строки является нулевой байт.


//Создайте две строки для сравнения:

//Вызовите функцию сравнения

//Выведите результат сравнения с помощью cout:

	char first_str[100] = "ABCDFTS";
	char second_str[100] = "ABCDF";

	int result = MyStrCmp(first_str, second_str);

	std::cout << result;
#endif
	stop
////////////////////////////////////////////////////////////////////////////
//Задание 4. Функции работы со строками
////////////////////////////////////////////////////////////////////////////
// 4. Создайте и вызовите функцию, которая принимает в качестве параметра 
#if 0
//порядковый номер - nN - месяца, 
//а возвращает  указатель на символьную строку, содержащую название заданного месяца. 
//Подсказки: 
//1) для того, чтобы данная функция работала корректно, 
// очень важно – как объявлена строка, указатель на которую требуется вернуть.
//2) Кроме того, было бы неплохо предусмотреть защиту при некорректном значении месяца.

	{
		const char* mStr = NameOfMonth(3);
		std::cout << mStr << std::endl;
	}
#endif
	stop
////////////////////////////////////////////////////////////////////////////
//Задание 5. Возвращение адреса.
////////////////////////////////////////////////////////////////////////////
#if 0
//Напишите функцию, которая находит адрес минимального элемента в массиве,
// таким образом, чтобы ее вызов можно было использовать слева от знака 
// равенства: *MyMin(параметры) = 0;
#endif
	stop
////////////////////////////////////////////////////////////////////////////
//Задание 6 (*).
////////////////////////////////////////////////////////////////////////////
#if 0
//Дан одномерный массив из N элементов
//Известно: значения элементов могут быть только в диапазоне 0, 1, 2 …., 30, 31.  
//Напишите две функции :
//•первая - «выясняет» какие значения встречаются в массиве четное число раз, 
//а какие – нечетное число раз. При этом, для результата можно использовать только один int, 
//	в который следует "запаковать" результат вычисления ) = >
//int   f1(параметры);
//•вторая –  выводит результат(Например: 0 встречается в массиве четное число раз)

//В задании привести объявление, определение и вызов функций.
#endif
	stop
//*********************   Дополнительное задание   ****************************************************
//Задание 7 (*)  
// Выполните задания 5 и 6 по курсовой работе 
// описание заданий находится в файлах "Задание (игра Змейка)_5 (функции без параметров)_3" и 
// "Задание (игра Змейка)_6 (функции с параметрами)_3.docs"
// К этим заданиям имеются подсказки, находящиеся в соответствующих файлах 
// Каждое задание выполняется в отдельном проекте
// Рекомендация:
// Все проекты (project), связанные с курсовой работой имеет смысл помещать в одно решение (solution)
//*****************************************************************************************************
	return 0;
}
